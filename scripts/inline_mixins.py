import re
from pathlib import Path

runon = Path("coldtype/runon")
_path = runon / "_path.py"
mixins = runon / "mixins"
out = runon / "path.py"

code = _path.read_text()
all_imports = []
all_functions = []

for mixin in mixins.glob("*Mixin.py"):
    _code = mixin.read_text()
    cd = re.findall(r"class [^\:]+Mixin\(\)\:", _code)[0]
    imports, functions = _code.split(cd)
    all_imports.extend([n for n in imports.splitlines() if n])
    all_functions.extend(functions.splitlines())

all_functions = "\n".join(all_functions)

fs = []
last_sig = None
matches = re.findall(r"[\s]{4}def[^\(]+\(self[^\)]+\)\:", all_functions)
annotated = []

def write_last(src):
    global last_sig
    if last_sig:
        if "return self" in src:
            last_sig = (last_sig[:-1] + " -> \"P\":")
        annotated.append(last_sig)
        annotated.append(src)
        #commented_form = last_sig.replace("def ", "def _")
        #annotated.append(commented_form)
        #annotated.append(f"{commented_form}\n        return self\n\n")
        #print(commented_form)
        print(last_sig.splitlines()[0])

for f in matches:
    before, after = all_functions.split(f)
    all_functions = after
    write_last(before)
    last_sig = f

write_last(after)
print(len(matches))

out.write_text(code
    .replace("# WARNING", '"""\n\n\n\n\n\n⚠️ This file was autogenerated\nby scripts/inline_mixins.py ⚠️\n\n\n\n\n\n"""')
    .replace("# IMPORTS", "\n".join(all_imports))
    .replace("# MIXINS", "\n".join(annotated)))